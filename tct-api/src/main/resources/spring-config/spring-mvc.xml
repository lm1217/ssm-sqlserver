<?xml version="1.0" encoding="UTF-8"?>
<beans default-autowire="byName" xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/task
       http://www.springframework.org/schema/task/spring-task.xsd">

    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!--将日志类注入到bean中。-->
    <bean id="systemLogAspect" class="com.iyeed.api.aspect.SystemLogAspect"></bean>

    <!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
    <!--<mvc:annotation-driven/>-->

    <context:component-scan base-package="com.iyeed.api,com.iyeed.core">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>
    </context:component-scan>

    <!--避免IE执行AJAX时，返回JSON出现下载文件 -->
    <mvc:annotation-driven>
        <mvc:message-converters>
            <!--避免文件下载时被转成json-->
            <bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter">

            </bean>
            <bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <bean id="json" class="org.springframework.http.MediaType">
                            <constructor-arg index="0" value="application"/>
                            <constructor-arg index="1" value="json"/>
                            <constructor-arg index="2" value="UTF-8"/>
                        </bean>
                    </list>
                </property>
                <!-- 使用@ResponseBody返回json时,日期格式默认显示为时间戳的问题 -->
                <property name="objectMapper">
                    <bean class="com.fasterxml.jackson.databind.ObjectMapper">
                        <!--去除字段值为null的字段-->
                        <!--<property name="serializationInclusion">-->
                           <!--<value type="com.fasterxml.jackson.annotation.JsonInclude.Include">NON_NULL</value>-->
                        <!--</property>-->
                        <property name="dateFormat">
                            <bean class="java.text.SimpleDateFormat">
                                <constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss"></constructor-arg>
                            </bean>
                        </property>
                    </bean>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!--springmvc上传文件-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 解析request的编码 ，Default is ISO-8859-1 -->
        <property name="defaultEncoding" value="UTF-8"/>
        <!-- 设置最大允许的大小(字节)。-1表示没有限制(默认) 1024*1024*10=10MB -->
        <property name="maxUploadSize" value="1048576000"/>
        <!-- 被允许的最大的内存的大小，Default is 10240 bytes -->
        <property name="maxInMemorySize" value="40960"/>
        <!-- 一个类似懒加载的属性.可以定义该属性.让解析文件的时候再抛异常,然后Controller中定义异常处理的方法 -->
        <property name="resolveLazily" value="true"/>
    </bean>

    <!--REST风格-->
    <mvc:default-servlet-handler/>

    <!--任务调度注解-->
    <task:annotation-driven/>

</beans>